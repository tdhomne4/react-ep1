npm
 - not node package manager
 - manages all packages, contain repo for all packages
 - package.json is configuration for packages in npm

- dependancy package : parcel - ignite app
- dependancy types : dev (dependancy in developmet) and normal (dependancy in production)

- npm install -D parcel (-D -> dev dependancy)

version 1.2.3 (major.minor.patch(bug fixes))
- caret (^) -> consider update minor and patch versio automatically which is compatible with 
our version but not major version as it can break functionality 1.2.2->1.2.4
- tilde (~) ->  consider update any version for patch and major versio automatically to bug
 fixex like 1.2.3 -> 1.2.3

========================================================================================
Config Driven UI : Whatever the condition coming from backend, UI will change.
- based on the location the UI(color, bg) will change.

========================================================================================

## why To give key={id} in map function ? (for optimization, uniquely identity each loop item)
-by key, every card is unique
- when add new one, react doesn't re-render all card, just add new one at its specific id
- if don't have key,all card is same and re-render all if any chnage happed.
- reactDoc said, don't use indes as key(if api do't have id then we can use)
- because create problem in sorting of card when new item id added reatc get confused

========================================================================================
- Default Export/Import
export default Compenent; - file is exporting by default only one
import Component from "path";

-Named Export/Import
export const name (named export) - to export multiple items from the file.
import {name} from "path";
========================================================================================

##React Hooks
- Normal JS function which give some utility
**useState -> 
- react funtion
- to update variable data  
-> [JSVariable, modifyJsVariable] = useState(default value);
- react keep track of state variable, when change, it triggered the Diff algo and re-render Component
-> why use state ? by using normal js variable we can update variable value but UI doesn’t update, to update UI when variable
change, we need state
========================================================================================
##render- whenever state variable update, react re-render the Component
	-	keep data layer in sync with UI layer

========================================================================================
##Virtual DOM -> representation of actual DOM(HTML Tags) ->ITs object
========================================================================================
#Reconciliation Algorithm (React Fiber-> in React 16) -> DOM Update https://github.com/acdlite/react-fiber-architecture?tab=readme-ov-file
#Diff Algorithm -> 
	-	Calculate difference between Old virtual DOM and new vitual DOM after update is done,
	- then it update the actual DOM on every render cycle.

========================================================================================
#Monolith architecture : 
- all services in one app(DB,API,UI,Authentication code)
- all code written in one language
#Microservice architecture (Single Responsibility Principle) (Seperation of Concerns): 
- all services in seperate app (DB, UI, API)
- all services are run on different port and its connected to url/api or url/backend
- we can write Microservice in different language

========================================================================================
#useEffect(Callback function, dependancy array);
- Callback function call after Component render;
- first body renderes, then useEffect called
========================================================================================
##Loader 
- loader is not good
- Shimmer UI 
- A better way to show loading states is to use a shimmer UI. A shimmer UI is a version of the UI that doesn’t contain actual content, but instead mimics the layout and shapes of the content that will eventually appear. It uses a gradient animation that creates a shimmering effect over the placeholders, giving the user a sense of motion and progress.
========================================================================================
#why we can change const variable in useState?

- useState, change the state of variable internally, each render have its internal state and re-render the Component.
- it create new state with new instance of const variable and re-render Component with new state value.