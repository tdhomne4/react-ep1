***Tailwind****
- fast, flexible, reliable and zero runtime
- npm install -D tailwindcss postcss
- Postscc => to tranform css with javascript
- npx tailwind init => initialize tailwind with config file , configuration file for tailwind
- postcss.config.js => configuration file for postcss, which read by bundler/parcel to understand tailwind and  apply tailwind css on the project 

***higher order component****
- component take input as a component and return enhance of another component or same one

***State lifting***
- every component has its own State
- is state is managed by child component
- we lift state up, state is manage by the parent component

***Controlled component***
- when component's visibility is based on the state value


***Props Drilling***
- if want to send data to 7th child component from parent component, then we need to pass it to first child then second child and so on till 7th child.
- this is problem in react => props Drilling
- so react introduced Context => we place data at global level, from where anybody can access it.

***Context***
- createContext() -> create context which store data
- useContext() -> to use context data in any component
- Context.Provider(value=({loggedInuser  : "new data})) -> update context data
- wrap all component inside Context.Provider, so anywhere you can use updated value
- all wrapped component, will have updated value and outside component have default value
- we can also update context value from any component, by passing SetuserName update state function along with value in provider

========================================================================================
##Redux Toolkit 

***Redux Toolkit why ? 
- make redux store complicated.
- need to do more complicated
- need to install more packages to make redux useful
- use to managing the data

***Store :
- big whole object which contain multiple small slices of object
- kept in central global place
- to modify data in store, need to dispatch Action -> Call function() [Reducer] -> function modified the data
- to read data in store, use "Selector" called -> subscribing to the store (update UI when data change in store -> syncing)

***Installations and setup steps: 
- Install @reduxjs/toolkit (npm i @reduxjs/toolkit) and react-redux (npm i react-redux)
- build our store 
- Connect store to our App 
- Slice (Cart Slice) 
- Dispatch (Action)
- Selector

**Implementations : 

- configureStore() =>  create redux store  {appStore.js}
- provide store to our app  (App.js)
- create slice which contain, state and actions, reducers function which perform the actions. {cartSlice.js}
- configured the reducers to our app store
- to get store data, useSelector (redux hook)

========================================================================================
**Interview quantion : 
- subscribe right portion of store like cart items not the whole store and then extract items its wrong and less efficient
- because store update when any changes happened in it.
- in appStore, we have big Reducer which contain small reducers of slice.
- in slice, we export one reducer of slice which contain multiple small reducer functions


========================================================================================
**Test Cases : 
- write code which test the full application functionality. 

**Types of Testing (developer) : 
	- Unit Testing => Test the small component isolately
	- Integration Testing => test the component integration, component talk to each other while perform soma functionality
	- End To End Testing => Test when user start (login) the application till leave the application (logout), whole flow of user functionality, it use tool for test like selenium etc

*****React Testing Library***
	- create-react-app have react-testing-Library already in it., in parcel we need to integrate it
	- RTL uses Jest for testing - it delightfull JS testing framework with a focus of simplicity.
	- npm i -D @testing-library/react
	- npm i -D jest
	- we are using jest along with Babel so need to install some depedencies (npm install --save-dev jest babel-jest @babel/preset-env @babel/preset-react react-test-renderer)
	- To configure babel, create babel.config.js and add code
	- parcel uses Babel behind the scene
	- Configure Parcel Config file to disable Babel default transpilation (means it use babel.config.js configuration)
	- Jest configuration (npx jest --init)
	- Install JS dom if we are using jest version > 28  (npm i -D jest-environment-jsdom)

**********Write Test Cases***********************
	- create __tests__ folder inside any where which contain test files inside this folder
	- check test cases (npm run test )
	- Install npm i -D @babel/preset-react => to make JSX work in test cases
	- Include @babel/preset-react inside babel config file
	- toBeInTheDocument for this install (@testing-library/jest-dom)
	- describe(test cases) => we can group multiple test cases in a group
	- test()/it()  => same function for test cases